import logging
import os
from pathlib import Path
from io import BytesIO
import base64

from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, FSInputFile
from aiogram.enums import ParseMode
from aiogram.types import BufferedInputFile
from aiogram.client.session.aiohttp import AiohttpSession
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web
import pandas as pd

# === Config ===
API_TOKEN = os.getenv("BOT_TOKEN")
BASE_WEBHOOK_URL = os.getenv("BASE_WEBHOOK_URL")
WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = BASE_WEBHOOK_URL + WEBHOOK_PATH

# === –ù–æ–≤—ã–π —à–∞–±–ª–æ–Ω XLSX –≤ base64 ===
EXCEL_TEMPLATE_BASE64 = """
... (–≤—Å—Ç–∞–≤—å —Å—é–¥–∞ —Ç–≤–æ–π base64)
""".strip()

# === Logging ===
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# === Init bot ===
session = AiohttpSession()
bot = Bot(token=API_TOKEN, session=session)
dp = Dispatcher()

# === –ö–æ–ª–æ–Ω–∫–∏-–º—ç–ø–ø–∏–Ω–≥ ===
COLUMN_MAPPING = {
    "–í—Ä–µ–º—è –ø–æ–¥–∞—á–∏ –¢–° –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É": "–í—Ä–µ–º—è –ø–æ–¥–∞—á–∏ –¢–° –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É",
    "–û–∫–Ω–æ –≤—ã–≥—Ä—É–∑–∫–∏": "–í—Ä–µ–º—è –ø–æ–¥–∞—á–∏ –¢–° –Ω–∞ —Ä–∞–∑–≥—Ä—É–∑–∫—É",
    "–ö–æ—Å—Ç —Ü–µ–Ω—Ç—Ä": "–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∑–∞–∫–∞–∑—á–∏–∫",
    "–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å": "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å",
    "–ü–æ–ª—É—á–∞—Ç–µ–ª—å": "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –ø–æ–ª—É—á–∞—Ç–µ–ª—å",
    "–ê–¥—Ä–µ—Å –∑–∞–≥—Ä—É–∑–∫–∏": "–ê–¥—Ä–µ—Å –∑–∞–≥—Ä—É–∑–∫–∏",
    "–ê–¥—Ä–µ—Å —Ä–∞–∑–≥—Ä—É–∑–∫–∏": "–ê–¥—Ä–µ—Å —Ä–∞–∑–≥—Ä—É–∑–∫–∏",
    "–û–±—ä–µ–º –ø–ª–∞–Ω, –º3 (–¢–°)": "–û–±—ä–µ–º, –∫—É–± –º",
    "–ö–æ–ª-–≤–æ –º–µ—Å—Ç (–¢–°)": "–ö–æ–ª-–≤–æ –≥—Ä—É–∑–æ–≤—ã—Ö –º–µ—Å—Ç",
    "–¢—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –ü–†–†?": "–¢—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –ø–æ–≥—Ä—É–∑–∫–∞",
    "–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã": "–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã",
    "–ö–æ–ª-–≤–æ –µ–¥–∏–Ω–∏—Ü —Ç–æ–≤–∞—Ä–∞": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ–¥–∏–Ω–∏—Ü —Ç–æ–≤–∞—Ä–∞",
    "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏": "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏",
    "–¢–∏–ø –º–∞—Ä—à—Ä—É—Ç–∞": "–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ",
}

# === –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —à–∞–±–ª–æ–Ω–∞ ===
def load_template():
    decoded = base64.b64decode(EXCEL_TEMPLATE_BASE64)
    with BytesIO(decoded) as b:
        return pd.read_excel(b)

def clean_string(value):
    if pd.isna(value):
        return ""
    return str(value).strip().replace('\xa0', '').replace('\u200b', '').replace('  ', ' ')

def parse_driver_and_phone(value):
    clean_val = clean_string(value)
    if not clean_val:
        return ""
    parts = [x.strip() for x in clean_val.split(",")]
    if len(parts) >= 2:
        return f"{parts[0]}, {parts[1]}"
    return parts[0]

@dp.message(F.document)
async def handle_doc(message: Message):
    logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª –æ—Ç {message.from_user.username}")
    file = await bot.download(message.document)
    incoming_df = pd.read_excel(file)
    incoming_df = incoming_df.applymap(clean_string)

    template_df = load_template()
    output_df = pd.DataFrame(columns=template_df.columns)

    for col in output_df.columns:
        if col == "–¢–∏–ø –≥—Ä—É–∑–æ–≤—ã—Ö –º–µ—Å—Ç":
            output_df[col] = ""
        elif col == "–ö–æ–Ω—Ç–∞–∫—Ç—ã":
            output_df[col] = incoming_df.get("–ö–æ–Ω—Ç–∞–∫—Ç—ã", "").map(parse_driver_and_phone)
        elif col == "–í–æ–¥–∏—Ç–µ–ª—å":
            output_df[col] = ""
        elif col in COLUMN_MAPPING:
            source_col = COLUMN_MAPPING[col]
            output_df[col] = incoming_df.get(source_col, "")
        else:
            output_df[col] = ""

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    with BytesIO() as b:
        output_df.to_excel(b, index=False)
        b.seek(0)
        processed = BufferedInputFile(b.read(), filename="output.xlsx")
        await message.reply_document(processed)

# === Webhook setup ===
async def on_startup(bot: Bot) -> None:
    await bot.set_webhook(WEBHOOK_URL)
    logger.info(f"üöÄ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")

def main():
    app = web.Application()
    SimpleRequestHandler(dispatcher=dp, bot=bot).register(app, path=WEBHOOK_PATH)
    setup_application(app, dp, bot=bot)
    web.run_app(app, port=8080)

if __name__ == "__main__":
    main()