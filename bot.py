import base64
import io
import logging
import os
import pandas as pd
import tempfile
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.types import FSInputFile
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web

API_TOKEN = os.getenv("TOKEN")
WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = os.getenv("WEBHOOK_URL") + WEBHOOK_PATH

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# === Новый шаблон XLSX в base64 ===
EXCEL_TEMPLATE_BASE64 = """""".strip()

MAPPING = {
    "Время подачи ТС на загрузку": "Время подачи ТС на загрузку",
    "Окно выгрузки": "Время подачи ТС на разгрузку",
    "Кост центр": "Внутренний заказчик",
    "Отправитель": "Организация отправитель",
    "Получатель": "Организация получатель",
    "Адрес загрузки": "Адрес загрузки",
    "Адрес разгрузки": "Адрес разгрузки",
    "Тип грузовых мест": "На паллетах",
    "Объем план, м3 (ТС)": "Объем, куб м",
    "Кол-во мест (ТС)": "Кол-во грузовых мест",
    "Требуется ли ПРР?": "Требуется ли ПРР?",
    "Часы работы": "Часы работы",
    "Кол-во единиц товара": "Количество единиц товара",
    "Комментарии": "Комментарии"
}

SPECIAL_COLUMNS = ["Марка ТС", "Номер ТС", "Номер прицепа", "Контакты"]

def clean_string(x):
    if isinstance(x, str):
        return x.strip()
    return x

def decode_template():
    data = base64.b64decode(EXCEL_TEMPLATE_BASE64)
    return io.BytesIO(data)

@dp.message(F.document)
async def handle_file(message: types.Message):
    await message.answer("📥 Обрабатываем файл...")
    file_info = await bot.get_file(message.document.file_id)
    downloaded_file = await bot.download_file(file_info.file_path)

    df_input = pd.read_excel(downloaded_file).applymap(clean_string)

    # Загрузить шаблон
    template_bytes = decode_template()
    df_template = pd.read_excel(template_bytes)

    df_output = pd.DataFrame(columns=df_template.columns)

    for column in df_output.columns:
        if column in MAPPING:
            src_col = MAPPING[column]
            if src_col in df_input.columns:
                df_output[column] = df_input[src_col]
            else:
                df_output[column] = ""
        elif column in SPECIAL_COLUMNS:
            if column == "Контакты":
                driver_rows = df_input["Контакты"].dropna().str.extract(r'([А-Яа-яЁёA-Za-z\s]+),?\s*(\+?\d[\d\- \(\)]{7,})?')
                df_output["Водитель"] = driver_rows[0].fillna("")
                df_output["Контакты"] = driver_rows[1].fillna("")
            else:
                if column in df_input.columns:
                    df_output[column] = df_input[column].fillna("")
                else:
                    df_output[column] = ""

    with tempfile.NamedTemporaryFile(suffix=".xlsx", delete=False) as tmp:
        df_output.to_excel(tmp.name, index=False)
        await message.answer_document(FSInputFile(tmp.name, filename="output.xlsx"))

async def on_startup(bot: Bot) -> None:
    await bot.set_webhook(WEBHOOK_URL)

app = web.Application()
SimpleRequestHandler(dispatcher=dp, bot=bot).register(app, path=WEBHOOK_PATH)
setup_application(app, dp, bot=bot, on_startup=on_startup)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    web.run_app(app, host="0.0.0.0", port=int(os.getenv("PORT", default=8080)))