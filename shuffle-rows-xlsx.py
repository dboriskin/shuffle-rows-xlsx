
import pandas as pd
import os
from pathlib import Path
import base64

TEMPLATE_B64 = """"""

def write_template_if_missing():
    if not os.path.exists("стало2.xlsx"):
        with open("стало2.xlsx", "wb") as f:
            f.write(base64.b64decode(TEMPLATE_B64))
        print("✅ Файл стало2.xlsx создан.")

def clean_string(value):
    if pd.isna(value):
        return ""
    return str(value).strip().replace('\xa0', '').replace('\u200b', '').replace('  ', ' ')

def parse_driver_data(value):
    clean_val = clean_string(value)
    if not clean_val:
        return "-", "-", "-"
    parts = [part.strip() for part in clean_val.split(",")]
    parts += ["-"] * (3 - len(parts))
    parts = [p if p != "-" else "-" for p in parts]
    return parts[0], parts[1], parts[2]

def extract_driver_contact(value):
    clean_val = clean_string(value)
    if not clean_val:
        return "", ""
    parts = clean_val.split(",")
    driver = parts[0].strip() if len(parts) > 0 else ""
    contact = parts[1].strip(" )") if len(parts) > 1 else ""
    return driver, contact

def process_file(file_path, template_df, output_folder):
    df = pd.read_excel(file_path)
    df = df.applymap(clean_string)

    if "Данные по водителю и машине" in df.columns:
        marka, number, trailer = zip(*df["Данные по водителю и машине"].map(parse_driver_data))
        df["Марка ТС"] = marka
        df["Номер ТС"] = number
        df["Номер прицепа"] = trailer

    if "Контакты" in df.columns:
        driver, contact = zip(*df["Контакты"].map(extract_driver_contact))
        df["Водитель"] = driver
        df["Контакты"] = contact

    for col in template_df.columns:
        if col not in df.columns:
            df[col] = ""

    df = df[template_df.columns]

    base_name = file_path.stem
    suffix = "-shuffled"
    output_file = output_folder / f"{base_name}{suffix}.xlsx"
    count = 2
    while output_file.exists():
        output_file = output_folder / f"{base_name}{suffix}{count}.xlsx"
        count += 1

    df.to_excel(output_file, index=False)
    print(f"✅ Сохранено: {output_file.name}")

def main():
    if not os.path.exists("input_files"):
        os.makedirs("input_files")
    if not os.path.exists("output_files"):
        os.makedirs("output_files")

    write_template_if_missing()

    template_df = pd.read_excel("стало2.xlsx")
    template_df.columns = [clean_string(c) for c in template_df.columns]

    files = list(Path("input_files").glob("*.xlsx"))
    if not files:
        print("❌ Нет файлов .xlsx в input_files!")
        return

    for file_path in files:
        process_file(file_path, template_df, Path("output_files"))

    print("🎉 Готово! Результаты в папке output_files.")

if __name__ == "__main__":
    main()
